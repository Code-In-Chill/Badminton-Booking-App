package org.group06.view.components.tabbedPane;

import com.itextpdf.text.DocumentException;
import org.group06.db.DatabaseConstant;
import org.group06.db.dao.*;
import org.group06.model.entity.*;
import org.group06.model.manager.Manager_QuanAo;
import org.group06.utils.EmailCreator;
import org.group06.utils.NumberStandard;
import org.group06.utils.PdfCreator;
import org.group06.view.components.search.Data;
import org.group06.view.components.search.SearchClickEvent;
import org.group06.view.components.textFields.PlaceholderTextField;
import org.group06.view.container.khachHang.PanelKhachHang;
import org.group06.view.container.khachHang.WinThemKH;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.time.Instant;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

/**
 * @author Le Minh Bao
 */
public class TabBanHang_DatHang extends javax.swing.JPanel {

    private final Connection connection = DatabaseConstant.getConnection();
    private final DAO_QuanAo daoQuanAo;

    private Manager_QuanAo qlQuanAo;
    private Manager_QuanAo qlQuanAoMua;
    private HashMap<String, String> dsLoaiQuanAo;
    private HashMap<String, String> dsKichThuoc;

    private ArrayList<NhaCungCap> dsNhaCungCap;
    private ArrayList<KhachHang> dsKhachHang;
    private ArrayList<KhuyenMai> dsKhuyenMai;

    private final NhanVien nhanVien;
    private KhuyenMai khuyenMai;
    private JTabbedPane tab;

    /**
     * Creates new form pnBanHang
     */
    public TabBanHang_DatHang(NhanVien nhanVien, JTabbedPane tab) {
        this.nhanVien = nhanVien;
        this.tab = tab;
        daoQuanAo = new DAO_QuanAo(connection);
        dsLoaiQuanAo = daoQuanAo.getAllLoaiQuanAo();
        dsKichThuoc = daoQuanAo.getAllKichThuocQA();
        qlQuanAo = new Manager_QuanAo(connection);
        qlQuanAoMua = new Manager_QuanAo();
        dsNhaCungCap = new DAO_NhaCungCap(connection).getAll();
        dsKhachHang = new DAO_KhachHang(connection).getAll();
        dsKhuyenMai = new DAO_KhuyenMai(connection).getAll();
        initComponents();
        khuyenMai = getChuongTrinhKhuyenMai();
        loadKichThuocQuanAo();
        loadAllTableQuanAo(qlQuanAo.getAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmnTimKiemKhachHang = new javax.swing.JPopupMenu();
        pnlTimKiemKhachHang = new org.group06.view.components.search.PanelSearch();
        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlMain = new javax.swing.JPanel();
        pnlLeft = new javax.swing.JPanel();
        pnlTimKiem = new javax.swing.JPanel();
        txtTimQA = new PlaceholderTextField("Tìm tên sản phẩm");
        lblLoaiQuanAo = new javax.swing.JLabel();
        cmbLoaiQuanAo = new javax.swing.JComboBox<>();
        lblNhaCungCap = new javax.swing.JLabel();
        cmbNhaCungCap = new javax.swing.JComboBox<>();
        lblKichCo = new javax.swing.JLabel();
        cmbKichCo = new javax.swing.JComboBox<>();
        btnLamMoi = new javax.swing.JButton();
        scrQuanAo = new javax.swing.JScrollPane();
        tblQuanAo = new javax.swing.JTable();
        pnlAction = new javax.swing.JPanel();
        lblSoLuongQuanAo = new javax.swing.JLabel();
        spnSoLuongQuanAo = new javax.swing.JSpinner();
        btnThemQuanAo = new javax.swing.JButton();
        scrDonHang = new javax.swing.JScrollPane();
        tblDonHang = new javax.swing.JTable();
        pnlInfo = new javax.swing.JPanel();
        pnlInfoKhachHang = new javax.swing.JPanel();
        lblTim_SDT_KhachHang = new javax.swing.JLabel();
        txtTim_SDT_KhachHang = new javax.swing.JTextField();
        lblKhachHang = new javax.swing.JLabel();
        txtKhachHang = new javax.swing.JTextField();
        btnXoaKhachHang = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        scrChuongTrinhKhuyenMai = new javax.swing.JScrollPane();
        taChuongTrinhKhuyenmai = new javax.swing.JTextArea();
        lbl_KhuyenMai_ApDung = new javax.swing.JLabel();
        lblKhuyenMai = new javax.swing.JLabel();
        tabBanHang_DatHang = new javax.swing.JTabbedPane();
        pnlBanHang = new javax.swing.JPanel();
        lbl_VAT_BanHang = new javax.swing.JLabel();
        spr_VAT_BanHang = new javax.swing.JSeparator();
        lbl_TongTien_BanHang = new javax.swing.JLabel();
        txt_TienKhachTra_BanHang = new javax.swing.JTextField();
        spr_TienThua_BanHang = new javax.swing.JSeparator();
        lbl_TienThua_BanHang = new javax.swing.JLabel();
        chk_XuatHD_BanHang = new javax.swing.JCheckBox();
        btnThanhToan = new javax.swing.JButton();
        pnlDatHang = new javax.swing.JPanel();
        lblNgayNhanHang = new javax.swing.JLabel();
        dchNgayNhanHang = new com.toedter.calendar.JDateChooser();
        lbl_VAT_DatHang = new javax.swing.JLabel();
        spr_VAT_DatHang = new javax.swing.JSeparator();
        chk_ThanhToanTruoc = new javax.swing.JCheckBox();
        lbl_TongTien_DatHang = new javax.swing.JLabel();
        txt_TienKhachTra_DatHang = new javax.swing.JTextField();
        spr_TienThua_DatHang = new javax.swing.JSeparator();
        lbl_TienThua_DatHang = new javax.swing.JLabel();
        chk_XuatDH_DatHang = new javax.swing.JCheckBox();
        btnDatHang = new javax.swing.JButton();

        pmnTimKiemKhachHang.add(pnlTimKiemKhachHang);
        pmnTimKiemKhachHang.setFocusable(false);

        pnlTimKiemKhachHang.addEventClick(new SearchClickEvent(){
            @Override
            public void itemClick(Data data) {
                txtTim_SDT_KhachHang.setText("");
                txtKhachHang.setText(data.getTitle());
                pmnTimKiemKhachHang.setVisible(false);
                pnlMain.requestFocus();
            }
        });

        setBackground(org.group06.utils.ColorConstant.BACKGROUND_CONTAINER);
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Bán Hàng");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2293, Short.MAX_VALUE)
            .addGroup(pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlTitleLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 2281, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
            .addGroup(pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTitle)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        add(pnlTitle);

        pnlMain.setLayout(new javax.swing.BoxLayout(pnlMain, javax.swing.BoxLayout.LINE_AXIS));

        pnlLeft.setPreferredSize(new java.awt.Dimension(1800, 1800));
        pnlLeft.setLayout(new javax.swing.BoxLayout(pnlLeft, javax.swing.BoxLayout.PAGE_AXIS));

        pnlTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Tìm Kiếm Quần Áo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        txtTimQA.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTimQA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTimQAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimQAKeyReleased(evt);
            }
        });

        lblLoaiQuanAo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblLoaiQuanAo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblLoaiQuanAo.setText("Loại Quần Áo");
        lblLoaiQuanAo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        cmbLoaiQuanAo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbLoaiQuanAo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả" }));
        for (String value : dsLoaiQuanAo.values()) {
            cmbLoaiQuanAo.addItem(value);
        }
        cmbLoaiQuanAo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbLoaiQuanAo.setLightWeightPopupEnabled(false);
        cmbLoaiQuanAo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLoaiQuanAoActionPerformed(evt);
            }
        });

        lblNhaCungCap.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblNhaCungCap.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNhaCungCap.setText("Nhà Cung Cấp");
        lblNhaCungCap.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        cmbNhaCungCap.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbNhaCungCap.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả" }));
        for (NhaCungCap nhaCungCap : dsNhaCungCap) {
            cmbNhaCungCap.addItem(nhaCungCap.getTenNCC());
        }
        cmbNhaCungCap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbNhaCungCap.setLightWeightPopupEnabled(false);
        cmbNhaCungCap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNhaCungCapActionPerformed(evt);
            }
        });

        lblKichCo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblKichCo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblKichCo.setText("Kích Cỡ");
        lblKichCo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        cmbKichCo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbKichCo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbKichCo.setLightWeightPopupEnabled(false);
        cmbKichCo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKichCoActionPerformed(evt);
            }
        });

        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLamMoi.setText("Làm Mới");
        btnLamMoi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTimKiemLayout = new javax.swing.GroupLayout(pnlTimKiem);
        pnlTimKiem.setLayout(pnlTimKiemLayout);
        pnlTimKiemLayout.setHorizontalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTimKiemLayout.createSequentialGroup()
                        .addComponent(txtTimQA, javax.swing.GroupLayout.DEFAULT_SIZE, 1035, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblLoaiQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbLoaiQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlTimKiemLayout.createSequentialGroup()
                        .addComponent(lblNhaCungCap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbNhaCungCap, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlTimKiemLayout.createSequentialGroup()
                        .addComponent(lblKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
        pnlTimKiemLayout.setVerticalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTimKiemLayout.createSequentialGroup()
                        .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbKichCo)
                            .addComponent(lblKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbLoaiQuanAo)
                            .addComponent(lblLoaiQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLamMoi))
                    .addGroup(pnlTimKiemLayout.createSequentialGroup()
                        .addComponent(txtTimQA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbNhaCungCap)
                            .addComponent(lblNhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pnlTimKiemLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLamMoi, cmbLoaiQuanAo, txtTimQA});

        pnlLeft.add(pnlTimKiem);

        scrQuanAo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh Sách Quần Áo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        scrQuanAo.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tblQuanAo.setAutoCreateRowSorter(true);
        tblQuanAo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Quần Áo", "Tên Quần Áo", "Loại Quần Áo", "Size", "Nhà Cung Cấp", "Số Lượng Còn", "Giá Bán"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblQuanAo.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = tblQuanAo.getSelectedRow();
                    if (selectedRow != -1) {
                        String maQA = tblQuanAo.getValueAt(selectedRow, 0).toString();
                        setSoLuongQuanAoToiDa(get_SLQA_TrongKho(maQA));
                    }
                }
            }
        });
        tblQuanAo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblQuanAo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblQuanAo.setFillsViewportHeight(true);
        tblQuanAo.setGridColor(new java.awt.Color(0, 0, 0));
        tblQuanAo.setRowHeight(50);
        tblQuanAo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblQuanAo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblQuanAo.setShowGrid(true);
        tblQuanAo.getTableHeader().setResizingAllowed(false);
        tblQuanAo.getTableHeader().setReorderingAllowed(false);
        tblQuanAo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblQuanAoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblQuanAoFocusLost(evt);
            }
        });
        scrQuanAo.setViewportView(tblQuanAo);

        pnlLeft.add(scrQuanAo);

        pnlAction.setPreferredSize(new java.awt.Dimension(1800, 80));

        lblSoLuongQuanAo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSoLuongQuanAo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSoLuongQuanAo.setText("Nhập số lượng quần áo mua");
        lblSoLuongQuanAo.setName(""); // NOI18N

        spnSoLuongQuanAo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        spnSoLuongQuanAo.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        JSpinner.NumberEditor ne = new JSpinner.NumberEditor(spnSoLuongQuanAo);
        spnSoLuongQuanAo.setEditor(ne);

        FocusAdapter focusAdapter = new FocusAdapter()
        {
            public void focusGained(final FocusEvent e)
            {
            }

            public void focusLost(final FocusEvent e) {
                spnSoLuongQuanAoFocusLost(e);
            };
        };

        ((JSpinner.DefaultEditor)spnSoLuongQuanAo.getEditor()).getTextField().addFocusListener(focusAdapter);
        spnSoLuongQuanAo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spnSoLuongQuanAo.setEnabled(false);
        spnSoLuongQuanAo.setName("spnSoLuongQuanAo"); // NOI18N

        btnThemQuanAo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnThemQuanAo.setText("Thêm Quần Áo");
        btnThemQuanAo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemQuanAo.setEnabled(false);
        btnThemQuanAo.setName("btnThemQuanAo"); // NOI18N
        btnThemQuanAo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemQuanAoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionLayout = new javax.swing.GroupLayout(pnlAction);
        pnlAction.setLayout(pnlActionLayout);
        pnlActionLayout.setHorizontalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionLayout.createSequentialGroup()
                .addContainerGap(615, Short.MAX_VALUE)
                .addComponent(lblSoLuongQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnSoLuongQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnThemQuanAo)
                .addContainerGap(554, Short.MAX_VALUE))
        );
        pnlActionLayout.setVerticalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblSoLuongQuanAo)
                    .addComponent(spnSoLuongQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemQuanAo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(249, Short.MAX_VALUE))
        );

        pnlActionLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblSoLuongQuanAo, spnSoLuongQuanAo});

        pnlLeft.add(pnlAction);

        scrDonHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Đơn Hàng Hiện Tại", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tblDonHang.setAutoCreateRowSorter(true);
        tblDonHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Quần Áo", "Tên Quần Áo", "Size", "Đơn Giá", "Số Lượng", "Thành Tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDonHang.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblDonHang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblDonHang.setFillsViewportHeight(true);
        tblDonHang.setGridColor(new java.awt.Color(0, 0, 0));
        tblDonHang.setRowHeight(50);
        tblDonHang.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDonHang.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDonHang.setShowGrid(true);
        tblDonHang.getTableHeader().setResizingAllowed(false);
        tblDonHang.getTableHeader().setReorderingAllowed(false);
        tblDonHang.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblDonHangFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblDonHangFocusLost(evt);
            }
        });
        tblDonHang.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int rowCount = tblDonHang.getRowCount();
                if (rowCount != 0) {
                    btnThanhToan.setEnabled(true);
                    btnDatHang.setEnabled(true);
                }
            }
        });
        tblDonHang.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int selectedRow = tblDonHang.getSelectedRow();
                if (selectedRow >= 0) {
                    // Khi có dòng được chọn, cho phép xóa
                    tblDonHang.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "delete");
                    tblDonHang.getActionMap().put("delete", new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            int soLuong = Integer.parseInt(tblDonHang.getValueAt(selectedRow, 4).toString());
                            String maQA = tblDonHang.getValueAt(selectedRow, 0).toString();
                            ((DefaultTableModel) tblDonHang.getModel()).removeRow(selectedRow);
                            capNhatSoTienMuaHang();
                            qlQuanAoMua.delete(qlQuanAoMua.getByID(maQA));
                            qlQuanAo.updateSoLuong(maQA, soLuong + qlQuanAo.getByID(maQA).getSoLuong());
                            xuLyTimKiemQuanAo();
                            disableBanHang();
                            if (tblDonHang.getRowCount() == 0) {
                                btnThanhToan.setEnabled(false);
                                btnDatHang.setEnabled(false);
                            }
                        }
                    });
                }
            }
        });
        scrDonHang.setViewportView(tblDonHang);

        pnlLeft.add(scrDonHang);

        pnlMain.add(pnlLeft);

        pnlInfo.setPreferredSize(new java.awt.Dimension(400, 400));

        pnlInfoKhachHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông Tin Khách Hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        lblTim_SDT_KhachHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTim_SDT_KhachHang.setText("Tìm số điện thoại khách hàng");

        txtTim_SDT_KhachHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTim_SDT_KhachHang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTim_SDT_KhachHangKeyReleased(evt);
            }
        });

        lblKhachHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblKhachHang.setText("Khách hàng hiện tại");

        txtKhachHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtKhachHang.setText("Khách vãng lai");
        txtKhachHang.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtKhachHang.setEnabled(false);

        btnXoaKhachHang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon/black/clear.png"))); // NOI18N
        btnXoaKhachHang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoaKhachHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaKhachHangActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnThem.setText("Thêm Mới");
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        taChuongTrinhKhuyenmai.setEditable(false);
        taChuongTrinhKhuyenmai.setColumns(20);
        taChuongTrinhKhuyenmai.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        taChuongTrinhKhuyenmai.setLineWrap(true);
        taChuongTrinhKhuyenmai.setRows(5);
        taChuongTrinhKhuyenmai.setWrapStyleWord(true);
        scrChuongTrinhKhuyenMai.setViewportView(taChuongTrinhKhuyenmai);

        lbl_KhuyenMai_ApDung.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_KhuyenMai_ApDung.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_KhuyenMai_ApDung.setText("0.00%");

        lblKhuyenMai.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblKhuyenMai.setText("Mã khuyến mãi đang áp dụng");

        javax.swing.GroupLayout pnlInfoKhachHangLayout = new javax.swing.GroupLayout(pnlInfoKhachHang);
        pnlInfoKhachHang.setLayout(pnlInfoKhachHangLayout);
        pnlInfoKhachHangLayout.setHorizontalGroup(
            pnlInfoKhachHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoKhachHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoKhachHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTim_SDT_KhachHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblKhachHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlInfoKhachHangLayout.createSequentialGroup()
                        .addComponent(txtKhachHang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoaKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInfoKhachHangLayout.createSequentialGroup()
                        .addComponent(txtTim_SDT_KhachHang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnThem))
                    .addComponent(lblKhuyenMai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_KhuyenMai_ApDung, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrChuongTrinhKhuyenMai))
                .addContainerGap())
        );
        pnlInfoKhachHangLayout.setVerticalGroup(
            pnlInfoKhachHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoKhachHangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTim_SDT_KhachHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoKhachHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTim_SDT_KhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblKhachHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoKhachHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtKhachHang)
                    .addComponent(btnXoaKhachHang, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblKhuyenMai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrChuongTrinhKhuyenMai, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_KhuyenMai_ApDung)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabBanHang_DatHang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabBanHang_DatHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tabBanHang_DatHang.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabBanHang_DatHangStateChanged(evt);
            }
        });

        pnlBanHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông Tin Thanh Toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        pnlBanHang.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lbl_VAT_BanHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_VAT_BanHang.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_VAT_BanHang.setText("Thuế VAT: 8%");

        spr_VAT_BanHang.setForeground(new java.awt.Color(0, 0, 0));

        lbl_TongTien_BanHang.setBackground(java.awt.Color.lightGray);
        lbl_TongTien_BanHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lbl_TongTien_BanHang.setForeground(new java.awt.Color(255, 0, 0));
        lbl_TongTien_BanHang.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_TongTien_BanHang.setText("0 VNĐ");
        lbl_TongTien_BanHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tổng Tiền Phải Trả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        lbl_TongTien_BanHang.setOpaque(true);

        txt_TienKhachTra_BanHang.setBackground(java.awt.Color.lightGray);
        txt_TienKhachTra_BanHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        txt_TienKhachTra_BanHang.setForeground(java.awt.Color.red);
        txt_TienKhachTra_BanHang.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txt_TienKhachTra_BanHang.setText("0 VNĐ");
        txt_TienKhachTra_BanHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tiền Khách Đưa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        txt_TienKhachTra_BanHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_TienKhachTra_BanHangActionPerformed(evt);
            }
        });

        spr_TienThua_BanHang.setForeground(new java.awt.Color(0, 0, 0));

        lbl_TienThua_BanHang.setBackground(java.awt.Color.lightGray);
        lbl_TienThua_BanHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lbl_TienThua_BanHang.setForeground(new java.awt.Color(255, 0, 0));
        lbl_TienThua_BanHang.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_TienThua_BanHang.setText("0 VNĐ");
        lbl_TienThua_BanHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tiền Thừa Trả Khách", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        lbl_TienThua_BanHang.setOpaque(true);

        chk_XuatHD_BanHang.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_XuatHD_BanHang.setSelected(true);
        chk_XuatHD_BanHang.setText("Xuất Hoá Đơn Bán Hàng");

        btnThanhToan.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnThanhToan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon/black/bill.png"))); // NOI18N
        btnThanhToan.setText("Thanh Toán");
        btnThanhToan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThanhToan.setEnabled(false);
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBanHangLayout = new javax.swing.GroupLayout(pnlBanHang);
        pnlBanHang.setLayout(pnlBanHangLayout);
        pnlBanHangLayout.setHorizontalGroup(
            pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBanHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spr_VAT_BanHang, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_TienThua_BanHang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spr_TienThua_BanHang)
                    .addComponent(txt_TienKhachTra_BanHang)
                    .addComponent(lbl_TongTien_BanHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_VAT_BanHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chk_XuatHD_BanHang, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlBanHangLayout.setVerticalGroup(
            pnlBanHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBanHangLayout.createSequentialGroup()
                .addContainerGap(976, Short.MAX_VALUE)
                .addComponent(lbl_VAT_BanHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spr_VAT_BanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(lbl_TongTien_BanHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_TienKhachTra_BanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spr_TienThua_BanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_TienThua_BanHang)
                .addGap(18, 18, 18)
                .addComponent(chk_XuatHD_BanHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabBanHang_DatHang.addTab("Bán Hàng", pnlBanHang);

        pnlDatHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông Tin Đặt Hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        pnlDatHang.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblNgayNhanHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblNgayNhanHang.setText("Ngày nhận hàng");

        dchNgayNhanHang.setDate(new java.util.Date());
        dchNgayNhanHang.setDateFormatString("dd-MM-yyyy");
        dchNgayNhanHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dchNgayNhanHang.setMinSelectableDate(java.util.Date.from(Instant.now())
        );

        lbl_VAT_DatHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_VAT_DatHang.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_VAT_DatHang.setText("Thuế VAT: 8%");

        spr_VAT_DatHang.setForeground(new java.awt.Color(0, 0, 0));

        chk_ThanhToanTruoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_ThanhToanTruoc.setSelected(true);
        chk_ThanhToanTruoc.setText("Khách hàng thanh toán trước");
        chk_ThanhToanTruoc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_ThanhToanTruocItemStateChanged(evt);
            }
        });

        lbl_TongTien_DatHang.setBackground(java.awt.Color.lightGray);
        lbl_TongTien_DatHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lbl_TongTien_DatHang.setForeground(new java.awt.Color(255, 0, 0));
        lbl_TongTien_DatHang.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_TongTien_DatHang.setText("0 VNĐ");
        lbl_TongTien_DatHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tổng Tiền Phải Trả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        lbl_TongTien_DatHang.setOpaque(true);

        txt_TienKhachTra_DatHang.setEditable(false);
        txt_TienKhachTra_DatHang.setBackground(java.awt.Color.lightGray);
        txt_TienKhachTra_DatHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        txt_TienKhachTra_DatHang.setForeground(java.awt.Color.red);
        txt_TienKhachTra_DatHang.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txt_TienKhachTra_DatHang.setText("0 VNĐ");
        txt_TienKhachTra_DatHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tiền Khách Đưa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        txt_TienKhachTra_DatHang.setDisabledTextColor(java.awt.Color.red);
        txt_TienKhachTra_DatHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_TienKhachTra_DatHangActionPerformed(evt);
            }
        });

        spr_TienThua_DatHang.setForeground(new java.awt.Color(0, 0, 0));

        lbl_TienThua_DatHang.setBackground(java.awt.Color.lightGray);
        lbl_TienThua_DatHang.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lbl_TienThua_DatHang.setForeground(new java.awt.Color(255, 0, 0));
        lbl_TienThua_DatHang.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_TienThua_DatHang.setText("0 VNĐ");
        lbl_TienThua_DatHang.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Tiền Thừa Trả Khách", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        lbl_TienThua_DatHang.setOpaque(true);

        chk_XuatDH_DatHang.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_XuatDH_DatHang.setSelected(true);
        chk_XuatDH_DatHang.setText("Xuất Hoá Đơn Đặt Hàng");

        btnDatHang.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDatHang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon/black/bill.png"))); // NOI18N
        btnDatHang.setText("Lưu Đơn Đặt Hàng");
        btnDatHang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDatHang.setEnabled(false);
        btnDatHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatHangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDatHangLayout = new javax.swing.GroupLayout(pnlDatHang);
        pnlDatHang.setLayout(pnlDatHangLayout);
        pnlDatHangLayout.setHorizontalGroup(
            pnlDatHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dchNgayNhanHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spr_VAT_DatHang, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_TienThua_DatHang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spr_TienThua_DatHang)
                    .addComponent(txt_TienKhachTra_DatHang)
                    .addComponent(lbl_TongTien_DatHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDatHang, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .addComponent(lbl_VAT_DatHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNgayNhanHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chk_XuatDH_DatHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chk_ThanhToanTruoc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDatHangLayout.setVerticalGroup(
            pnlDatHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatHangLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblNgayNhanHang)
                .addGap(11, 11, 11)
                .addComponent(dchNgayNhanHang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 888, Short.MAX_VALUE)
                .addComponent(lbl_VAT_DatHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spr_VAT_DatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_ThanhToanTruoc, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_TongTien_DatHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_TienKhachTra_DatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spr_TienThua_DatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_TienThua_DatHang)
                .addGap(18, 18, 18)
                .addComponent(chk_XuatDH_DatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dchNgayNhanHang.setLocale(new Locale("vi", "VN"));
        dchNgayNhanHang.getCalendarButton().setIcon(org.group06.utils.ImagePath.loadIcon(org.group06.utils.ImagePath.ICON_CALENDAR));
        dchNgayNhanHang.getDateEditor().setEnabled(false);
        ((com.toedter.calendar.JTextFieldDateEditor) dchNgayNhanHang.getDateEditor()).setDisabledTextColor(java.awt.Color.BLACK);

        tabBanHang_DatHang.addTab("Đặt Hàng", pnlDatHang);

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlInfoKhachHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabBanHang_DatHang))
                .addGap(0, 0, 0))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addComponent(pnlInfoKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabBanHang_DatHang, javax.swing.GroupLayout.DEFAULT_SIZE, 1442, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.JLabel lblBanHang = new javax.swing.JLabel("Bán Hàng");
        javax.swing.JLabel lblDatHang = new javax.swing.JLabel("Đặt Hàng");
        lblBanHang.setPreferredSize(new Dimension(130, 30));
        lblDatHang.setPreferredSize(new Dimension(130, 30));
        lblBanHang.setHorizontalAlignment(SwingConstants.CENTER);
        lblDatHang.setHorizontalAlignment(SwingConstants.CENTER);
        lblBanHang.setFont(new Font("Segoe UI", 1, 18));
        lblDatHang.setFont(new Font("Segoe UI", 1, 18));
        tabBanHang_DatHang.setTabComponentAt(0, lblBanHang);
        tabBanHang_DatHang.setTabComponentAt(1, lblDatHang);

        pnlMain.add(pnlInfo);

        add(pnlMain);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        resetTimKiem();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void cmbLoaiQuanAoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLoaiQuanAoActionPerformed
        xuLyTimKiemQuanAo();
    }//GEN-LAST:event_cmbLoaiQuanAoActionPerformed

    private void cmbNhaCungCapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNhaCungCapActionPerformed
        xuLyTimKiemQuanAo();
    }//GEN-LAST:event_cmbNhaCungCapActionPerformed

    private void cmbKichCoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKichCoActionPerformed
        xuLyTimKiemQuanAo();
    }//GEN-LAST:event_cmbKichCoActionPerformed

    private void txtTimQAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimQAKeyPressed
        xuLyTimKiemQuanAo();
    }//GEN-LAST:event_txtTimQAKeyPressed

    private void txtTimQAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimQAKeyReleased
        xuLyTimKiemQuanAo();
    }//GEN-LAST:event_txtTimQAKeyReleased

    private void tblQuanAoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblQuanAoFocusGained
        if (tblQuanAo.getRowCount() > 0 && tblQuanAo.getSelectedRow() != -1) {
            spnSoLuongQuanAo.setEnabled(true);
            btnThemQuanAo.setText("Thêm Quần Áo");
            btnThemQuanAo.setEnabled(true);
        }
    }//GEN-LAST:event_tblQuanAoFocusGained

    private void tblQuanAoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblQuanAoFocusLost
        Component focusedComponent = evt.getOppositeComponent(); // Lấy component đang được focus
        // Kiểm tra xem component đang được focus có phải là spnSoLuongQuanAo hoặc btnThemQuanAo hay không
        if (focusedComponent != null) {
            // Kiểm tra xem component đang được focus có phải là Spinner.formattedTextField của spnSoLuongQuanAo
            if (focusedComponent.equals(spnSoLuongQuanAo.getEditor().getComponent(0))) {
                // Nếu là Spinner.formattedTextField của spnSoLuongQuanAo, không làm gì cả
                return;
            }

            // Kiểm tra xem component đang được focus có phải là btnThemQuanAo hay không
            if (focusedComponent.equals(btnThemQuanAo)) {
                // Nếu là btnThemQuanAo, không làm gì cả
                return;
            }
        }

        // Nếu không phải, vô hiệu hóa spnSoLuongQuanAo và btnThemQuanAo
        disableBanHang();
    }//GEN-LAST:event_tblQuanAoFocusLost

    private void spnSoLuongQuanAoFocusLost(java.awt.event.FocusEvent evt) {
        Component focusedComponent = evt.getOppositeComponent();
        if (focusedComponent != null) {
            if (focusedComponent.equals(tblQuanAo)) {
                // Nếu là tblQuanAo, set số lượng về 1
                spnSoLuongQuanAo.setValue(1);
            } else if (focusedComponent.equals(btnThemQuanAo)) {
            } else {
                // Nếu không phải cả hai trường hợp trên, vô hiệu hóa spnSoLuongQuanAo và btnThemQuanAo
                disableBanHang();
            }
        } else {
            // Nếu focusedComponent là null, vô hiệu hóa spnSoLuongQuanAo và btnThemQuanAo
            disableBanHang();
        }
    }

    private void btnThemQuanAoActionPerformed(java.awt.event.ActionEvent evt) {
        String label = btnThemQuanAo.getText();

        if (label.equals("Thêm Quần Áo")) {
            QuanAo quanAo = qlQuanAo.getByID(tblQuanAo.getValueAt(tblQuanAo.getSelectedRow(), 0).toString());

            //======================================================================
            QuanAo quanAoDuocMua = new QuanAo();
            quanAoDuocMua.setMaQA(quanAo.getMaQA());
            quanAoDuocMua.setTenQA(quanAo.getTenQA());
            quanAoDuocMua.setLoaiQuanAo(quanAo.getLoaiQuanAo());
            quanAoDuocMua.setNhaCungCap(quanAo.getNhaCungCap());
            quanAoDuocMua.setMaKichThuoc(quanAo.getMaKichThuoc());
            quanAoDuocMua.setGiaNhap(quanAo.getGiaNhap());
            quanAoDuocMua.setLoiNhuan(quanAo.getLoiNhuan());
            quanAoDuocMua.setHinhAnh(quanAo.getHinhAnh());
            quanAoDuocMua.setTrangThai(quanAo.isTrangThai());
            quanAoDuocMua.setThuongHieu(quanAo.getThuongHieu());
            //======================================================================

            if (quanAo != null) {
                int soLuongMua = NumberStandard.parseInt(((JSpinner.DefaultEditor) spnSoLuongQuanAo.getEditor()).getTextField().getText());
                int soLuongTonKho = quanAo.getSoLuong();
                int soLuongDuocMua = soLuongMua <= soLuongTonKho ? soLuongMua : soLuongTonKho;

                // Thêm quần áo vào đơn hàng và cập nhật số lượng tồn kho
                themQuanAoVaoDonHang(quanAo, soLuongDuocMua);
                qlQuanAo.updateSoLuong(quanAo.getMaQA(), soLuongTonKho - soLuongDuocMua);
                daoQuanAo.updateSoLuongQuanAo(quanAo.getMaQA(), soLuongDuocMua, false);

                // Thêm quần áo vào danh sách quần áo được mua
                quanAoDuocMua.setSoLuong(soLuongDuocMua);
                qlQuanAoMua.add(quanAoDuocMua);
            }
        } else {
            QuanAo quanAo = qlQuanAo.getByID(tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0).toString());

            int soLuongMua = NumberStandard.parseInt(tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 4).toString());
            int soLuongCapNhat = NumberStandard.parseInt(((JSpinner.DefaultEditor) spnSoLuongQuanAo.getEditor()).getTextField().getText());
            int soLuongTonKho = quanAo.getSoLuong();

            if (soLuongMua > soLuongCapNhat) {
                int soLuongChenhLech = soLuongMua - soLuongCapNhat;

                // Cập nhật số lượng mua và số lượng tồn kho
                capNhatSoLuongMua(soLuongCapNhat, tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()));
                qlQuanAo.updateSoLuong(quanAo.getMaQA(), soLuongTonKho + soLuongChenhLech);
                daoQuanAo.updateSoLuongQuanAo(quanAo.getMaQA(), soLuongChenhLech, true);

                // Cập nhật số lượng quần áo được mua
                qlQuanAoMua.updateSoLuong(quanAo.getMaQA(), soLuongCapNhat);
            } else if (soLuongMua < soLuongCapNhat) {
                int soLuongChenhLech = soLuongCapNhat - soLuongMua;
                if (soLuongTonKho == 0) {
                    JOptionPane.showMessageDialog(this, "Sản phẩm này đã hết hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    capNhatSoTienMuaHang();
                    xuLyTimKiemQuanAo();
                    disableBanHang();
                    return;
                }
                if (soLuongChenhLech <= soLuongTonKho) {
                    // Cập nhật số lượng mua và số lượng tồn kho
                    capNhatSoLuongMua(soLuongCapNhat, tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()));
                    qlQuanAo.updateSoLuong(quanAo.getMaQA(), soLuongTonKho - soLuongChenhLech);
                    daoQuanAo.updateSoLuongQuanAo(quanAo.getMaQA(), soLuongChenhLech, false);

                    // Cập nhật số lượng quần áo được mua
                    qlQuanAoMua.updateSoLuong(quanAo.getMaQA(), soLuongCapNhat);
                } else {
                    // Cập nhật số lượng mua và số lượng tồn kho
                    capNhatSoLuongMua(soLuongMua + soLuongTonKho, tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()));
                    qlQuanAo.updateSoLuong(quanAo.getMaQA(), 0);
                    daoQuanAo.updateSoLuongQuanAo(quanAo.getMaQA(), soLuongMua + soLuongTonKho, false);

                    // Cập nhật số lượng quần áo được mua
                    qlQuanAoMua.updateSoLuong(quanAo.getMaQA(), soLuongMua + soLuongTonKho);
                }
            }
        }

        capNhatSoTienMuaHang();
        xuLyTimKiemQuanAo();
        disableBanHang();
    }

    private void tblDonHangFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblDonHangFocusGained
        if (tblDonHang.getRowCount() != 0 && tblDonHang.getSelectedRow() != -1) {
            setSoLuongQuanAoDangChon(tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 4).toString());
            spnSoLuongQuanAo.setEnabled(true);
            btnThemQuanAo.setText("Cập Nhật");
            btnThemQuanAo.setEnabled(true);
        }
    }//GEN-LAST:event_tblDonHangFocusGained

    private void tblDonHangFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblDonHangFocusLost
        Component focusedComponent = evt.getOppositeComponent(); // Lấy component đang được focus
        // Kiểm tra xem component đang được focus có phải là spnSoLuongQuanAo hoặc btnThemQuanAo hay không
        if (focusedComponent != null) {
            // Kiểm tra xem component đang được focus có phải là Spinner.formattedTextField của spnSoLuongQuanAo
            if (focusedComponent.equals(spnSoLuongQuanAo.getEditor().getComponent(0))) {
                return;
            }

            // Kiểm tra xem component đang được focus có phải là btnThemQuanAo hay không
            if (focusedComponent.equals(btnThemQuanAo)) {
                return;
            }
        }

        // Nếu không phải, vô hiệu hóa spnSoLuongQuanAo và btnThemQuanAo
        disableBanHang();
    }//GEN-LAST:event_tblDonHangFocusLost

    private void txt_TienKhachTra_BanHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_TienKhachTra_BanHangActionPerformed
        capNhatSoTienMuaHang();
    }//GEN-LAST:event_txt_TienKhachTra_BanHangActionPerformed

    private void txtTim_SDT_KhachHangKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTim_SDT_KhachHangKeyReleased
        String sdt = txtTim_SDT_KhachHang.getText().trim();
        pnlTimKiemKhachHang.setData(xuLyTimKiemKhachHang(sdt));
        if (pnlTimKiemKhachHang.getItemSize() > 0) {
            pmnTimKiemKhachHang.show(txtTim_SDT_KhachHang, 0, txtKhachHang.getHeight());
            pmnTimKiemKhachHang.setPopupSize(txtTim_SDT_KhachHang.getWidth(), (pnlTimKiemKhachHang.getItemSize() * 70));
        } else {
            pmnTimKiemKhachHang.setVisible(false);
        }
    }//GEN-LAST:event_txtTim_SDT_KhachHangKeyReleased

    private void btnXoaKhachHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaKhachHangActionPerformed
        txtKhachHang.setText("Khách vãng lai");
        pnlMain.requestFocus();
    }//GEN-LAST:event_btnXoaKhachHangActionPerformed

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        ArrayList<QuanAo> dsQuanAoMua = qlQuanAoMua.getAll();

        KhachHang khachHang = null;
        for (KhachHang kh : dsKhachHang) {
            if (kh.getTenKH().equals(txtKhachHang.getText())) {
                khachHang = kh;
                break;
            }
        }

        // TODO: Hoàn thành xử lý bán hàng
        String maHoaDon = taoMaHD();
        Date ngayHienTai = new Date(System.currentTimeMillis());

        HoaDon hoaDonBanHang = new HoaDon(maHoaDon, ngayHienTai, khachHang, nhanVien, khuyenMai);
        DAO_HoaDon dao_HoaDon = new DAO_HoaDon(connection);
        int selection = JOptionPane.showConfirmDialog(this, "Bạn có muốn hoàn tất đơn hàng không?", "Thông báo", JOptionPane.YES_NO_OPTION);
        if (selection == JOptionPane.YES_OPTION) {
            double tongThanhTien = 0.0f;
            DAO_ChiTietHoaDon dao_ChiTietHoaDon = new DAO_ChiTietHoaDon(connection);
            if (dao_HoaDon.add(hoaDonBanHang)) {
                for (QuanAo quanAo : dsQuanAoMua) {
                    double giaBan = tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan());
                    tongThanhTien += giaBan * quanAo.getSoLuong();
                    ChiTietHoaDon cthd = new ChiTietHoaDon(hoaDonBanHang, quanAo, quanAo.getSoLuong(), giaBan, quanAo.getLoiNhuan());
                    dao_ChiTietHoaDon.add(cthd);
                    daoQuanAo.updateSoLuongQuanAo(qlQuanAo.getByID(quanAo.getMaQA()));
                }
                if (khachHang != null) {
                    khachHang.setDiemTichLuy(khachHang.getDiemTichLuy() + (int) (tongThanhTien / 100000));
                    khachHang.setHang(khachHang.tinhHangKhachHang());
                    new DAO_KhachHang(connection).capNhatDiemTichLuyVaHang(khachHang.getMaKhachHang(), khachHang.getHang(), khachHang.getDiemTichLuy());
                }
                JOptionPane.showMessageDialog(this, "Thanh toán thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                reloadAll();
            }
            // TODO: Xuất hoá đơn
            if (chk_XuatHD_BanHang.isSelected()) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Chọn Vị Trí Lưu Hoá Đơn");
                // Chỉ cho phép lưu file với định dạng .pdf
                fileChooser.setFileFilter(new FileNameExtensionFilter("PDF files", "pdf"));
                fileChooser.setSelectedFile(new File(hoaDonBanHang.getMaHoaDon() + ".pdf"));
                // Hiển thị hộp thoại để chọn vị trí lưu file
                int result = fileChooser.showSaveDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    // Lấy đường dẫn đã chọn
                    String filePath = fileChooser.getSelectedFile().getPath();
                    // Kiểm tra xem có đuôi mở rộng của file không
                    if (!filePath.endsWith(".pdf")) {
                        filePath += ".pdf";
                    }
                    // Kiểm tra nếu file đã tồn tại
                    File file = fileChooser.getSelectedFile();
                    if (file.exists()) {
                        int response = JOptionPane.showConfirmDialog(null,
                                "File đã tồn tại, bạn có muốn ghi đè lên file này?", "Cảnh báo",
                                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if (response == JOptionPane.YES_OPTION) {
                            // Lưu file
                            try {
                                PdfCreator.createInvoice(hoaDonBanHang, filePath);

                                // Mở file vừa lưu
                                if (Desktop.isDesktopSupported()) {
                                    try {
                                        Desktop.getDesktop().open(file);
                                    } catch (IOException e1) {
                                        System.out.println("Lỗi khi mở file!");
                                        JOptionPane.showMessageDialog(this, "Lỗi khi mở file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                KhachHang kh = hoaDonBanHang.getKhachHang();
                                String path = filePath;
                                new Thread(() -> {
                                    if (kh.getEmail() != null) {
                                        EmailCreator.sendEmailWithAttachment(kh.getEmail(), "Hóa đơn mua hàng - " + maHoaDon, "Đây là hóa đơn mua hàng của bạn!", path);
                                    }
                                }).start();
                            } catch (DocumentException | IOException e1) {
                                System.out.println("Lỗi khi lưu file!");
                                JOptionPane.showMessageDialog(this, "Lỗi khi lưu file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        // Lưu file
                        try {
                            PdfCreator.createInvoice(hoaDonBanHang, filePath);

                            // Mở file vừa lưu
                            if (Desktop.isDesktopSupported()) {
                                try {
                                    Desktop.getDesktop().open(file);
                                } catch (IOException e1) {
                                    System.out.println("Lỗi khi mở file!");
                                    JOptionPane.showMessageDialog(this, "Lỗi khi mở file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            KhachHang kh = hoaDonBanHang.getKhachHang();
                            String path = filePath;
                            new Thread(() -> {
                                if (kh.getEmail() != null) {
                                    EmailCreator.sendEmailWithAttachment(kh.getEmail(), "Hóa đơn mua hàng - " + maHoaDon, "Đây là hóa đơn mua hàng của bạn!", path);
                                }
                            }).start();
                        } catch (DocumentException | IOException e1) {
                            System.out.println("Lỗi khi lưu file!");
                            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
            tab.removeTabAt(tab.getSelectedIndex());
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private KhuyenMai getChuongTrinhKhuyenMai() {
        KhuyenMai khuyenMai = null;
        for (KhuyenMai km : dsKhuyenMai) {
            LocalDate ngayBatDau = km.getNgayBatDau().toLocalDate();
            LocalDate ngayKetThuc = km.getNgayKetThuc().toLocalDate();
            if (ngayBatDau.isBefore(LocalDate.now()) && ngayKetThuc.isAfter(LocalDate.now()) && km.getSoLuotSuDung() > 0) {
                khuyenMai = km;
                km.setSoLuotSuDung(km.getSoLuotSuDung() - 1);
                break;
            }
        }

        if (khuyenMai != null) {
            taChuongTrinhKhuyenmai.setText(khuyenMai.getTenCTKM());
            lbl_KhuyenMai_ApDung.setText(NumberStandard.formatPercent(khuyenMai.getMucGiamGia()));
        }
        return khuyenMai;
    }

    private void txt_TienKhachTra_DatHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_TienKhachTra_DatHangActionPerformed
        capNhatSoTienMuaHang();
    }//GEN-LAST:event_txt_TienKhachTra_DatHangActionPerformed

    private void btnDatHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatHangActionPerformed
        ArrayList<QuanAo> dsQuanAoDat = qlQuanAoMua.getAll();

        KhachHang khachHang = null;
        for (KhachHang kh : dsKhachHang) {
            if (kh.getTenKH().equals(txtKhachHang.getText())) {
                khachHang = kh;
                break;
            }
        }

        if (khachHang == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng đang đặt hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // TODO: Hoàn thành xử lý bán hàng
        String maPhieuDat = taoMaPD();
        Date ngayHienTai = new Date(System.currentTimeMillis());
        Date ngayNhanHang = new Date(dchNgayNhanHang.getDate().getTime());

        PhieuDat phieuDatHang = null;
        if (ngayNhanHang.toLocalDate().isEqual(ngayHienTai.toLocalDate())) {
            phieuDatHang = new PhieuDat(maPhieuDat, ngayHienTai, ngayNhanHang, khachHang, nhanVien, khuyenMai, PhieuDat.CHO_NHAN_HANG, chk_ThanhToanTruoc.isSelected());
        } else {
            phieuDatHang = new PhieuDat(maPhieuDat, ngayHienTai, ngayNhanHang, khachHang, nhanVien, khuyenMai, PhieuDat.CHUA_DEN_HEN, chk_ThanhToanTruoc.isSelected());
        }

        DAO_PhieuDat dao_PhieuDat = new DAO_PhieuDat(connection);
        int selection = JOptionPane.showConfirmDialog(this, "Bạn có muốn hoàn tất đặt hàng không?", "Thông báo", JOptionPane.YES_NO_OPTION);
        if (selection == JOptionPane.YES_OPTION) {
            DAO_ChiTietPhieuDat dao_ChiTietPhieuDat = new DAO_ChiTietPhieuDat(connection);
            if (dao_PhieuDat.add(phieuDatHang)) {
                for (QuanAo quanAo : dsQuanAoDat) {
                    ChiTietPhieuDat ctpd = new ChiTietPhieuDat(phieuDatHang, quanAo, quanAo.getSoLuong(), tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()), quanAo.getLoiNhuan());
                    dao_ChiTietPhieuDat.add(ctpd);
                    daoQuanAo.updateSoLuongQuanAo(qlQuanAo.getByID(quanAo.getMaQA()));
                }
                JOptionPane.showMessageDialog(this, "Đặt hàng thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                reloadAll();
            }
            // TODO: Xuất phiếu đặt hàng
            if (chk_XuatDH_DatHang.isSelected()) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Chọn Vị Trí Lưu Phiếu Đặt Hàng");
                // Chỉ cho phép lưu file với định dạng .pdf
                fileChooser.setFileFilter(new FileNameExtensionFilter("PDF files", "pdf"));
                fileChooser.setSelectedFile(new File(phieuDatHang.getMaPhieuDat() + ".pdf"));
                // Hiển thị hộp thoại để chọn vị trí lưu file
                int result = fileChooser.showSaveDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    // Lấy đường dẫn đã chọn
                    String filePath = fileChooser.getSelectedFile().getPath();
                    // Kiểm tra xem có đuôi mở rộng của file không
                    if (!filePath.endsWith(".pdf")) {
                        filePath += ".pdf";
                    }
                    // Kiểm tra nếu file đã tồn tại
                    File file = fileChooser.getSelectedFile();
                    if (file.exists()) {
                        int response = JOptionPane.showConfirmDialog(null,
                                "File đã tồn tại, bạn có muốn ghi đè lên file này?", "Cảnh báo",
                                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if (response == JOptionPane.YES_OPTION) {
                            // Lưu file
                            try {
                                PdfCreator.createOrder(phieuDatHang, filePath);

                                // Mở file vừa lưu
                                if (Desktop.isDesktopSupported()) {
                                    try {
                                        Desktop.getDesktop().open(file);
                                    } catch (IOException e1) {
                                        System.out.println("Lỗi khi mở file!");
                                        JOptionPane.showMessageDialog(this, "Lỗi khi mở file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                KhachHang kh = phieuDatHang.getKhachHang();
                                String path = filePath;
                                new Thread(() -> {
                                    if (kh.getEmail() != null) {
                                        EmailCreator.sendEmailWithAttachment(kh.getEmail(), "Phiếu Đặt Hàng - " + maPhieuDat, "Đây là phiếu đặt hàng của bạn!", path);
                                    }
                                }).start();
                            } catch (DocumentException | IOException e1) {
                                System.out.println("Lỗi khi lưu file!");
                                JOptionPane.showMessageDialog(this, "Lỗi khi lưu file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        // Lưu file
                        try {
                            PdfCreator.createOrder(phieuDatHang, filePath);

                            // Mở file vừa lưu
                            if (Desktop.isDesktopSupported()) {
                                try {
                                    Desktop.getDesktop().open(file);
                                } catch (IOException e1) {
                                    System.out.println("Lỗi khi mở file!");
                                    JOptionPane.showMessageDialog(this, "Lỗi khi mở file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            KhachHang kh = phieuDatHang.getKhachHang();
                            String path = filePath;
                            new Thread(() -> {
                                if (kh.getEmail() != null) {
                                    EmailCreator.sendEmailWithAttachment(kh.getEmail(), "Phiếu Đặt Hàng - " + maPhieuDat, "Đây là phiếu đặt hàng của bạn!", path);
                                }
                            }).start();
                        } catch (DocumentException | IOException e1) {
                            System.out.println("Lỗi khi lưu file!");
                            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
            tab.removeTabAt(tab.getSelectedIndex());
        }
    }//GEN-LAST:event_btnDatHangActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        callFrameThemKH();
    }//GEN-LAST:event_btnThemActionPerformed

    private void chk_ThanhToanTruocItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_ThanhToanTruocItemStateChanged
        txt_TienKhachTra_DatHang.setEditable(chk_ThanhToanTruoc.isSelected());
        capNhatSoTienMuaHang();
    }//GEN-LAST:event_chk_ThanhToanTruocItemStateChanged

    private void tabBanHang_DatHangStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabBanHang_DatHangStateChanged
        switch (tabBanHang_DatHang.getSelectedIndex()) {
            case 0:
                lblTitle.setText("Bán Hàng");
                break;
            case 1:
                lblTitle.setText("Đặt Hàng");
                break;
        }
    }//GEN-LAST:event_tabBanHang_DatHangStateChanged

    private void callFrameThemKH() {
        WinThemKH frThemKH = new WinThemKH(new PanelKhachHang());
        frThemKH.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frThemKH.setResizable(false);
        frThemKH.setVisible(true);
        dsKhachHang = new DAO_KhachHang(connection).getAll();
    }

    /**
     * reset lại các giá trị của bảng đơn hàng, tiền khách trả, tiền thừa, ...
     */
    private void reloadAll() {
        resetTimKiem();
        ((DefaultTableModel) tblDonHang.getModel()).setRowCount(0);
        txt_TienKhachTra_BanHang.setText(NumberStandard.formatMoney(0));
        capNhatSoTienMuaHang();
        txtKhachHang.setText("Khách vãng lai");
        lbl_KhuyenMai_ApDung.setText(NumberStandard.formatPercent(0.0f));
        qlQuanAoMua.deleteAll();
        btnThanhToan.setEnabled(false);
        btnDatHang.setEnabled(false);
        chk_ThanhToanTruoc.setSelected(true);
        chk_XuatDH_DatHang.setSelected(true);
        chk_XuatDH_DatHang.setSelected(true);
        dchNgayNhanHang.setDate(new Date(System.currentTimeMillis()));
        tabBanHang_DatHang.setSelectedIndex(0);
    }

    /**
     * Cập nhật bảng hiển thị quần áo dựa trên danh sách quần áo và loại quần
     * áo.
     *
     * @param dsQuanAo Danh sách sản phẩm quần áo.
     */
    private void loadAllTableQuanAo(ArrayList<QuanAo> dsQuanAo) {
        DefaultTableModel modelQuanAo = (DefaultTableModel) this.tblQuanAo.getModel();
        modelQuanAo.setRowCount(0);
        for (QuanAo quanAo : dsQuanAo) {
            if (quanAo.getSoLuong() > 0 && quanAo.isTrangThai()) {
                String kichThuoc = "";
                for (Map.Entry<String, String> item : dsKichThuoc.entrySet()) {
                    if (item.getKey().equals(quanAo.getMaKichThuoc())) {
                        kichThuoc = item.getValue();
                        break;
                    }
                }
                Object[] data = {
                        quanAo.getMaQA(), quanAo.getTenQA(),
                        dsLoaiQuanAo.get(quanAo.getLoaiQuanAo()),
                        kichThuoc, quanAo.getNhaCungCap().getTenNCC(),
                        quanAo.getSoLuong(), tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan())
                };
                // Thêm dữ liệu vào table
                modelQuanAo.addRow(data);
            }
        }
    }

    private void loadAllTableMuaHang(ArrayList<QuanAo> all) {
        DefaultTableModel modelMuaHang = (DefaultTableModel) this.tblDonHang.getModel();
        modelMuaHang.setRowCount(0);
        for (QuanAo quanAo : all) {
            double giaBan = tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan());
            double thanhTien = tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()) * quanAo.getSoLuong();
            String kichThuoc = "";
            for (Map.Entry<String, String> item : dsKichThuoc.entrySet()) {
                if (item.getKey().equals(quanAo.getMaKichThuoc())) {
                    kichThuoc = item.getValue();
                    break;
                }
            }

            Object[] data = {
                    quanAo.getMaQA(), quanAo.getTenQA(),
                    kichThuoc, giaBan,
                    quanAo.getSoLuong(), thanhTien
            };
            // Thêm dữ liệu vào table
            modelMuaHang.addRow(data);
        }

        capNhatSoTienMuaHang();
    }

    private void loadKichThuocQuanAo() {
        DefaultComboBoxModel<String> cmbModel = new DefaultComboBoxModel<>();
        cmbModel.removeAllElements();
        cmbModel.addElement("Tất Cả");
        for (HashMap.Entry<String, String> item : dsKichThuoc.entrySet()) {
            cmbModel.addElement(item.getValue());
        }
        this.cmbKichCo.setModel(cmbModel);
        this.cmbKichCo.setSelectedIndex(0);
    }

    /**
     * Thêm quần áo vào đơn hàng hoặc cập nhật thông tin nếu đã tồn tại.
     *
     * @param quanAo     Quần áo cần thêm vào đơn hàng hoặc cập nhật.
     * @param soLuongMua Số lượng quần áo muốn thêm vào đơn hàng.
     */
    private void themQuanAoVaoDonHang(QuanAo quanAo, int soLuongMua) {
        DefaultTableModel modelDonHang = (DefaultTableModel) this.tblDonHang.getModel();
        int rowExist = -1;

        // Kiểm tra xem đã tồn tại hàng trong đơn hàng chưa
        if (modelDonHang.getRowCount() > 0) {
            for (int i = 0; i < modelDonHang.getRowCount(); i++) {
                String maQA = modelDonHang.getValueAt(i, 0).toString();
                if (maQA.equals(quanAo.getMaQA())) {
                    rowExist = i;
                    break;
                }
            }
        }

        if (rowExist != -1) {
            // Nếu hàng đã tồn tại, cập nhật thông tin
            int soLuongCu = Integer.parseInt(modelDonHang.getValueAt(rowExist, 4).toString());
            int soLuongMoi = soLuongCu + soLuongMua;
            tblDonHang.setValueAt(soLuongMoi, rowExist, 4);
            tblDonHang.setValueAt(soLuongMoi * tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()), rowExist, 5);
            return;
        }

        // Nếu hàng chưa tồn tại, thêm thông tin mới
        double giaBan = tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan());
        double thanhTien = tinhGiaBan(quanAo.getGiaNhap(), quanAo.getLoiNhuan()) * soLuongMua;
        String kichThuoc = "";
        for (Map.Entry<String, String> item : dsKichThuoc.entrySet()) {
            if (item.getKey().equals(quanAo.getMaKichThuoc())) {
                kichThuoc = item.getValue();
                break;
            }
        }
        Object[] data = {
                quanAo.getMaQA(), quanAo.getTenQA(),
                kichThuoc, giaBan,
                soLuongMua, thanhTien
        };

        // Thêm dữ liệu vào table
        modelDonHang.addRow(data);
    }

    /**
     * Tính giá bán dựa trên giá nhập quần áo và lợi nhuận.
     *
     * @param giaNhap  Giá nhập của sản phẩm.
     * @param loiNhuan Lợi nhuận được áp dụng cho sản phẩm (dưới dạng phần
     *                 trăm).
     * @return Giá bán của sản phẩm.
     */
    private double tinhGiaBan(double giaNhap, double loiNhuan) {
        return giaNhap + (giaNhap * loiNhuan / 100);
    }

    private void resetTimKiem() {
        txtTimQA.setText("Tìm tên sản phẩm");
        txtTimQA.setForeground(Color.GRAY);

        cmbLoaiQuanAo.setSelectedIndex(0);
        cmbKichCo.setSelectedIndex(0);
        cmbNhaCungCap.setSelectedIndex(0);

        loadAllTableQuanAo(qlQuanAo.getAll());

        pnlBanHang.requestFocus();
    }

    /**
     * Xử lý tìm kiếm quần áo dựa trên các tiêu chí được chọn từ giao diện người
     * dùng.
     */
    private void xuLyTimKiemQuanAo() {
        String tenQuanAoTim = txtTimQA.getText().equals("Tìm tên sản phẩm") ? "" : txtTimQA.getText().toLowerCase().trim();
        String loaiQuanAo = cmbLoaiQuanAo.getSelectedItem().toString();
        String kichCo = "";
        for (Map.Entry<String, String> item : dsKichThuoc.entrySet()) {
            if (item.getValue().equals(cmbKichCo.getSelectedItem().toString())) {
                kichCo = item.getKey();
                break;
            }
        }
        String nhaCungCap = cmbNhaCungCap.getSelectedItem().toString();
        ArrayList<QuanAo> dsQuanAoTimDuoc = new ArrayList<>();

        for (QuanAo quanAo : qlQuanAo.getAll()) {
            boolean matchTen = tenQuanAoTim.isEmpty() || quanAo.getTenQA().toLowerCase().contains(tenQuanAoTim);
            boolean matchLoai = loaiQuanAo.equals("Tất Cả") || dsLoaiQuanAo.get(quanAo.getLoaiQuanAo()).equalsIgnoreCase(loaiQuanAo);
            boolean matchKichThuoc = kichCo.equals("") || quanAo.getMaKichThuoc().equalsIgnoreCase(kichCo);
            boolean matchNhaCungCap = nhaCungCap.equals("Tất Cả") || quanAo.getNhaCungCap().getTenNCC().toLowerCase().contains(nhaCungCap.toLowerCase());

            if (matchTen && matchLoai && matchKichThuoc && matchNhaCungCap) {
                dsQuanAoTimDuoc.add(quanAo);
            }
        }
        // Cập nhật kết quả tìm kiếm lên bảng
        loadAllTableQuanAo(dsQuanAoTimDuoc);
    }

    /**
     * Xử lý tìm kiếm khách hàng dựa trên số điện thoại.
     *
     * @param sdt Số điện thoại khách hàng.
     * @return Danh sách khách hàng tìm được.
     */
    private ArrayList<Data> xuLyTimKiemKhachHang(String sdt) {
        ArrayList<Data> result = new ArrayList<>();
        int limitSize = 8;

        for (KhachHang kh : dsKhachHang) {
            if (kh.getSoDienThoai().contains(sdt)) {
                if (kh.getMaKhachHang().equals("KH000")) {
                    continue;
                }
                result.add(new Data(kh.getTenKH(), kh.getSoDienThoai()));
                if (result.size() == limitSize) {
                    break;
                }
            }
        }
        return result;
    }

    /**
     * Xử lý tìm kiếm khuyến mãi dựa trên mã khuyến mãi.
     *
     * @param maKM Mã khuyến mãi.
     * @return Danh sách khuyến mãi tìm được.
     */
    private ArrayList<Data> xuLyTimKiemKhuyenMai(String maKM) {
        ArrayList<Data> result = new ArrayList<>();
        int limitSize = 8;

        for (KhuyenMai km : dsKhuyenMai) {
            if (km.getMaKhuyenMai().contains(maKM.toUpperCase())) {
                result.add(new Data(km.getTenCTKM(), km.getMaKhuyenMai()));
                if (result.size() == limitSize) {
                    break;
                }
            }
        }
        return result;
    }

    /**
     * Lấy số lượng quần áo trong kho dựa trên mã quần áo.
     *
     * @param maQA Mã quần áo.
     * @return Số lượng quần áo trong kho.
     */
    private int get_SLQA_TrongKho(String maQA) {
        for (QuanAo quanAo : qlQuanAo.getAll()) {
            if (quanAo.getMaQA().equals(maQA)) {
                return quanAo.getSoLuong();
            }
        }
        return 0;
    }

    private void setSoLuongQuanAoToiDa(int soLuong) {
        this.spnSoLuongQuanAo.setModel(new SpinnerNumberModel(1, 1, soLuong, 1));
    }

    public String taoMaHD() {
        int count = new DAO_HoaDon(connection).loadMaHDCount();
        count++;
        // Tạo mã hoá đơn theo quy tắc và có thứ tự
        return "HD" + String.format("%03d", count); // Ví dụ: HD001, HD002,...
    }

    public String taoMaPD() {
        int count = new DAO_PhieuDat(connection).loadMaPDCount();
        count++;

        return "PD" + String.format("%03d", count);
    }

    private void setSoLuongQuanAoDangChon(String soLuong) {
        ((JSpinner.DefaultEditor) spnSoLuongQuanAo.getEditor()).getTextField().setText(soLuong);
    }

    private void capNhatSoLuongMua(int soLuongMoi, double giaBan) {
        tblDonHang.setValueAt(soLuongMoi, tblDonHang.getSelectedRow(), 4);
        tblDonHang.setValueAt(soLuongMoi * giaBan, tblDonHang.getSelectedRow(), 5);
    }

    private void capNhatSoTienMuaHang() {
        double tongTienPhaiTra = 0;
        double thueVAT = 0.08f;
        double giaTriKhuyenMai = this.khuyenMai == null ? 0 : this.khuyenMai.getMucGiamGia();

        String textTienKhachTra = tabBanHang_DatHang.getSelectedIndex() <= 0 ? txt_TienKhachTra_BanHang.getText() : txt_TienKhachTra_DatHang.getText();
        double tienKhachTra = NumberStandard.roundAndNormalizeMoney(NumberStandard.parseMoney(textTienKhachTra));
        if (tblDonHang.getRowCount() > 0) {
            for (int i = 0; i < tblDonHang.getRowCount(); i++) {
                tongTienPhaiTra += NumberStandard.parseDouble(tblDonHang.getValueAt(i, 5).toString());
            }
            tongTienPhaiTra += tongTienPhaiTra * thueVAT;
            tongTienPhaiTra -= tongTienPhaiTra * giaTriKhuyenMai / 100;
            tongTienPhaiTra = NumberStandard.roundAndNormalizeMoney(tongTienPhaiTra);

            lbl_TongTien_BanHang.setText(NumberStandard.formatMoney(tongTienPhaiTra));
            lbl_TongTien_DatHang.setText(NumberStandard.formatMoney(tongTienPhaiTra));
            if (tienKhachTra < tongTienPhaiTra) {
                txt_TienKhachTra_BanHang.setText(NumberStandard.formatMoney(tongTienPhaiTra));
                lbl_TienThua_BanHang.setText(NumberStandard.formatMoney(0));

                // Đặt Hàng
                if (chk_ThanhToanTruoc.isSelected()) {
                    txt_TienKhachTra_DatHang.setText(NumberStandard.formatMoney(tongTienPhaiTra));
                    lbl_TienThua_DatHang.setText(NumberStandard.formatMoney(0));
                } else {
                    txt_TienKhachTra_DatHang.setText(NumberStandard.formatMoney(0));
                    lbl_TienThua_DatHang.setText(NumberStandard.formatMoney(0));
                }
            } else {
                double tienTraKhach = tienKhachTra - tongTienPhaiTra;
                txt_TienKhachTra_BanHang.setText(NumberStandard.formatMoney(tienKhachTra));
                lbl_TienThua_BanHang.setText(NumberStandard.formatMoney(tienTraKhach));

                // Đặt Hàng
                if (chk_ThanhToanTruoc.isSelected()) {
                    txt_TienKhachTra_DatHang.setText(NumberStandard.formatMoney(tienKhachTra));
                    lbl_TienThua_DatHang.setText(NumberStandard.formatMoney(tienTraKhach));
                } else {
                    txt_TienKhachTra_DatHang.setText(NumberStandard.formatMoney(0));
                    lbl_TienThua_DatHang.setText(NumberStandard.formatMoney(0));
                }
            }
        } else {
            String defaultCost = NumberStandard.formatMoney(0);
            // Bán Hàng
            lbl_TongTien_BanHang.setText(defaultCost);
            txt_TienKhachTra_BanHang.setText(defaultCost);
            lbl_TienThua_BanHang.setText(defaultCost);

            // Đặt Hàng
            lbl_TongTien_DatHang.setText(defaultCost);
            txt_TienKhachTra_DatHang.setText(defaultCost);
            lbl_TienThua_DatHang.setText(defaultCost);
        }
    }

    private void disableBanHang() {
        pnlMain.requestFocus();
        ((JSpinner.DefaultEditor) spnSoLuongQuanAo.getEditor()).getTextField().setText("1");
        spnSoLuongQuanAo.setEnabled(false);
        btnThemQuanAo.setText("Thêm Quần Áo");
        btnThemQuanAo.setEnabled(false);
        tblQuanAo.clearSelection();
        tblDonHang.clearSelection();
    }

    public void synchronizeData() {
        dsLoaiQuanAo = daoQuanAo.getAllLoaiQuanAo();
        dsKichThuoc = daoQuanAo.getAllKichThuocQA();
        qlQuanAo = new Manager_QuanAo(connection);
        dsNhaCungCap = new DAO_NhaCungCap(connection).getAll();
        dsKhachHang = new DAO_KhachHang(connection).getAll();
        dsKhuyenMai = new DAO_KhuyenMai(connection).getAll();
        loadKichThuocQuanAo();
        loadAllTableQuanAo(qlQuanAo.getAll());
    }

    public void releaseCart() {
        for (QuanAo quanAo : qlQuanAoMua.getAll()) {
            daoQuanAo.updateSoLuongQuanAo(quanAo.getMaQA(), quanAo.getSoLuong(), true);
        }
        new DAO_KhuyenMai(connection).updateSoLuotSuDung(this.khuyenMai.getMaKhuyenMai(), 1, true);
    }

    // <editor-fold defaultstate="collapsed" desc="Initiate Variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatHang;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemQuanAo;
    private javax.swing.JButton btnXoaKhachHang;
    private javax.swing.JCheckBox chk_ThanhToanTruoc;
    private javax.swing.JCheckBox chk_XuatDH_DatHang;
    private javax.swing.JCheckBox chk_XuatHD_BanHang;
    private javax.swing.JComboBox<String> cmbKichCo;
    private javax.swing.JComboBox<String> cmbLoaiQuanAo;
    private javax.swing.JComboBox<String> cmbNhaCungCap;
    private com.toedter.calendar.JDateChooser dchNgayNhanHang;
    private javax.swing.JLabel lblKhachHang;
    private javax.swing.JLabel lblKhuyenMai;
    private javax.swing.JLabel lblKichCo;
    private javax.swing.JLabel lblLoaiQuanAo;
    private javax.swing.JLabel lblNgayNhanHang;
    private javax.swing.JLabel lblNhaCungCap;
    private javax.swing.JLabel lblSoLuongQuanAo;
    private javax.swing.JLabel lblTim_SDT_KhachHang;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbl_KhuyenMai_ApDung;
    private javax.swing.JLabel lbl_TienThua_BanHang;
    private javax.swing.JLabel lbl_TienThua_DatHang;
    private javax.swing.JLabel lbl_TongTien_BanHang;
    private javax.swing.JLabel lbl_TongTien_DatHang;
    private javax.swing.JLabel lbl_VAT_BanHang;
    private javax.swing.JLabel lbl_VAT_DatHang;
    private javax.swing.JPopupMenu pmnTimKiemKhachHang;
    private javax.swing.JPanel pnlAction;
    private javax.swing.JPanel pnlBanHang;
    private javax.swing.JPanel pnlDatHang;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlInfoKhachHang;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTimKiem;
    private org.group06.view.components.search.PanelSearch pnlTimKiemKhachHang;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JScrollPane scrChuongTrinhKhuyenMai;
    private javax.swing.JScrollPane scrDonHang;
    private javax.swing.JScrollPane scrQuanAo;
    private javax.swing.JSpinner spnSoLuongQuanAo;
    private javax.swing.JSeparator spr_TienThua_BanHang;
    private javax.swing.JSeparator spr_TienThua_DatHang;
    private javax.swing.JSeparator spr_VAT_BanHang;
    private javax.swing.JSeparator spr_VAT_DatHang;
    private javax.swing.JTextArea taChuongTrinhKhuyenmai;
    private javax.swing.JTabbedPane tabBanHang_DatHang;
    private javax.swing.JTable tblDonHang;
    private javax.swing.JTable tblQuanAo;
    private javax.swing.JTextField txtKhachHang;
    private javax.swing.JTextField txtTimQA;
    private javax.swing.JTextField txtTim_SDT_KhachHang;
    private javax.swing.JTextField txt_TienKhachTra_BanHang;
    private javax.swing.JTextField txt_TienKhachTra_DatHang;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
